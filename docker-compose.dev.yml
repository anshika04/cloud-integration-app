# Development Environment Docker Compose

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cloud-integration-dev-postgres
    environment:
      POSTGRES_DB: cloudintegration_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./environments/dev/backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cloud-network-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d cloudintegration_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cloud-integration-dev-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - cloud-network-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - SPRING_PROFILES_ACTIVE=dev
    container_name: cloud-integration-dev-backend
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cloudintegration_dev
      - DB_USERNAME=dev_user
      - DB_PASSWORD=dev_password
    ports:
      - "8081:8080"
    volumes:
      - ./environments/dev/backend/application-dev.yml:/app/config/application-dev.yml
      - ./logs/backend:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloud-network-dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/cloud/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ../cloud-integration-frontend
      dockerfile: Dockerfile.frontend
      args:
        - ENVIRONMENT=dev
    container_name: cloud-integration-dev-frontend
    environment:
      - ENVIRONMENT=dev
    ports:
      - "3001:80"
    volumes:
      - ./environments/dev/frontend/environment.dev.ts:/app/src/environments/environment.ts
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cloud-network-dev
    restart: unless-stopped

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  cloud-network-dev:
    driver: bridge
